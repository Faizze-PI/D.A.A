def dijkstras(n, cost, s, dist):
    visited = [0] * 10
    count = 1
    for i in range(1, n + 1):
        visited[i] = 0
        dist[i] = cost[s][i]
    visited[s] = 1
    dist[s] = 0
    while count <= n:
        min_val = 999
        for i in range(1, n + 1):
            if dist[i] < min_val and visited[i] == 0:
                min_val = dist[i]
                v = i
        visited[v] = 1
        count += 1
        for i in range(1, n + 1):
            if dist[i] > dist[v] + cost[v][i]:
                dist[i] = dist[v] + cost[v][i]

def main():
    n = int(input("Enter the no. of nodes: "))
    cost = [[0 for _ in range(10)] for _ in range(10)]
    dist = [0] * 10
    for i in range(1, n + 1):
        for j in range(1, n + 1):
            cost[i][j] = int(input(f"{i} -> {j} = "))
            if cost[i][j] == 0:
                cost[i][j] = 999
    s = int(input("\nSource vertex: "))
    dijkstras(n, cost, s, dist)
    print(f"\nShortest path from {s} is \n")
    for i in range(1, n + 1):
        if s != i:
            print(f"{s} -> {i} = {dist[i]}")

if __name__ == "__main__":
    main()
